// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id          String @id @default(uuid())
  name        String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  billboards  Billboard[] @relation("StoreToBillboard")
  categories  Category[] @relation("StoreToCategory")
  colors      Color[] @relation("StoreToColor")
  orders      Order[] @relation("StoreToOrder")
  products    Product[] @relation("StoreToProduct")
  sizes       Size[] @relation("StoreToSize")
}

model Billboard {
  id          String @id @default(uuid())
  storeId     String
  label       String
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categories  Category[]
  store       Store @relation("StoreToBillboard", fields: [storeId], references: [id])

  @@index([storeId])
}

model Category {
  id          String @id @default(uuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  billboardId String
  billboard   Billboard @relation(fields: [billboardId],references: [id])
  products    Product[] @relation("CategoryToProduct")
  storeId     String
  store       Store @relation("StoreToCategory",fields:[storeId],references: [id])

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id          String @id @default(uuid())
  name        String
  value       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  products    Product[]

  storeId     String
  store       Store @relation("StoreToSize",fields:[storeId],references: [id])

  @@index([storeId])
}

model Color {
  id          String @id @default(uuid())
  name        String
  value       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  products    Product[]

  storeId     String
  store       Store @relation("StoreToColor",fields:[storeId],references: [id])

  @@index([storeId])
}

model Product {
  id          String @id @default(uuid())
  name        String
  price       Decimal
  isFeatured  Boolean @default(false)
  isArchived  Boolean @default(false)
  images      Image[]
  orderItems  OrderItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryId  String
  category    Category @relation("CategoryToProduct",fields: [categoryId],references: [id])
  colorId     String
  color       Color @relation(fields: [colorId],references: [id])
  sizeId      String
  size        Size @relation(fields: [sizeId],references: [id])
  storeId     String
  store       Store @relation("StoreToProduct",fields:[storeId],references: [id])

  @@index([colorId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([storeId])
}

model Image {
  id          String @id @default(uuid())
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  productId   String
  product     Product @relation(fields:[productId],references: [id],onDelete: Cascade)

  @@index([productId])
}

model Order {
  id          String @id @default(uuid())
  orderItems  OrderItem[]
  isPaid      Boolean @default(false)
  phone       String @default("")
  address     String @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  storeId     String
  store       Store @relation("StoreToOrder",fields:[storeId],references: [id])

@@index([storeId])
}

model OrderItem {
  id          String @id @default(uuid())
  orderId     String
  order       Order @relation(fields:[orderId],references: [id])
  productId   String
  product     Product @relation(fields:[productId],references: [id])

@@index([orderId])
@@index([productId])
}